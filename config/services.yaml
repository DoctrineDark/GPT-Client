# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    _instanceof:
        App\Service\Gpt\Contract\Gpt:
            tags: ['app.gpt']

    App\Service\Gpt\AIService:
        arguments:
            $gptServices: !tagged_iterator app.gpt

    App\Service\OpenAI\Tiktoken\EncoderProvider: ~
    App\Service\OpenAI\Tokenizer\TokenCalculator: ~
    App\Service\VectorSearch\RedisSearcher: ~
    Symfony\Component\DomCrawler\Crawler: ~

    Predis\ClientInterface: '@Predis\Client'
    Predis\Client:
        arguments:
            -
                #scheme: '%env(REDIS_SCHEME)%'
                host: '%env(REDIS_HOST)%'
                port: '%env(REDIS_PORT)%'
                database: '%env(REDIS_DATABASE)%'
                #password: '%env(REDIS_PASSWORD)%'

    App\Service\OpenAI\Client:
        arguments:
            $apiKey: '%env(OPENAI_API_KEY)%'
        calls:
            - [setProxy, ['%env(OPENAI_PROXY)%']]
            - [setProxyAuth, ['%env(OPENAI_PROXY_AUTH)%']]

    App\Service\YandexGpt\Client:
        arguments:
            $apiKey: '%env(YANDEXGPT_API_KEY)%'
        calls:
            - [setProxy, ['%env(YANDEX_GPT_PROXY)%']]
            - [setProxyAuth, ['%env(YANDEX_GPT_PROXY_AUTH)%']]

    App\Service\Gemini\Client:
        arguments:
            $apiKey: '%env(GEMINI_API_KEY)%'
        calls:
            - [setProxy, ['%env(GEMINI_PROXY)%']]
            - [setProxyAuth, ['%env(GEMINI_PROXY_AUTH)%']]

    App\Service\Cloudflare\WorkersAI\Client:
        arguments:
            $accountId: '%env(CLOUDFLARE_WORKERS_AI_ACCOUNT_ID)%'
            $apiKey: '%env(CLOUDFLARE_WORKERS_AI_API_TOKEN)%'
        calls:
            - [setProxy, ['%env(CLOUDFLARE_WORKERS_AI_PROXY)%']]
            - [setProxyAuth, ['%env(CLOUDFLARE_WORKERS_AI_PROXY_AUTH)%']]

    App\Service\Cloudflare\Vectorize\Client:
        arguments:
            $accountId: '%env(CLOUDFLARE_VECTORIZE_ACCOUNT_ID)%'
            $apiKey: '%env(CLOUDFLARE_VECTORIZE_API_TOKEN)%'
        calls:
            - [setProxy, ['%env(CLOUDFLARE_VECTORIZE_PROXY)%']]
            - [setProxyAuth, ['%env(CLOUDFLARE_VECTORIZE_PROXY_AUTH)%']]

    App\Service\OpenAI\Tokenizer\Tokenizer:
        arguments:
            $provider: '@App\Service\OpenAI\Tiktoken\EncoderProvider'
            $calculator: '@App\Service\OpenAI\Tokenizer\TokenCalculator'

    # Event Listeners
    App\EventListener\KnowledgebaseSectionListener:
        tags:
            - name: doctrine.orm.entity_listener
              event: postPersist
              entity: App\Entity\KnowledgebaseSection

            - name: doctrine.orm.entity_listener
              event: postUpdate
              entity: App\Entity\KnowledgebaseSection

    App\EventListener\KnowledgebaseCategoryListener:
        tags:
            - name: doctrine.orm.entity_listener
              event: postPersist
              entity: App\Entity\KnowledgebaseCategory

            - name: doctrine.orm.entity_listener
              event: postUpdate
              entity: App\Entity\KnowledgebaseCategory

    App\EventListener\ArticleListener:
        tags:
            - name: doctrine.orm.entity_listener
              event: postPersist
              entity: App\Entity\Article

            - name: doctrine.orm.entity_listener
              event: postUpdate
              entity: App\Entity\Article
